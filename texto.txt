1. Compilación y Validación del Software
1.1. Ejecución de Maven Clean Install
El agente debe lanzar el comando mvn clean install sobre el microservicio generado, asegurando que compila y es operativo.
Debe detectar y reportar cualquier error de compilación, y ser capaz de sugerir o aplicar correcciones automáticas simples (dependencias, errores tipográficos, errores de sintaxis habituales, etc.).
2. Calidad y Cobertura de Código
2.1. Generación de Tests Unitarios (JUnit)
El agente debe generar tests JUnit que cubran entre un 90% y un 100% del código, incluyendo casos positivos y negativos.
Debe ejecutar los tests y reportar resultados, proponiendo o implementando mejoras si la cobertura no es suficiente.
2.2. Análisis de Calidad SonarQube
El agente debe ejecutar el análisis de SonarQube mediante Maven (mvn sonar:sonar) de forma local o en la pipeline.
Debe interpretar el informe de Sonar y subsanar automáticamente los errores detectados (bugs, code smells, vulnerabilidades, duplicación, etc.).
Debe generar un resumen ejecutivo de la calidad del código.
3. Seguridad
3.1. Análisis de Seguridad Fortify
El agente debe lanzar el análisis Fortify como parte del pipeline.
Si el análisis detecta vulnerabilidades, el agente debe revisar el informe (disponible por URL en el action) y proponer o aplicar correcciones.
Debe adjuntar el informe de Fortify o la URL de acceso en la Pull Request.
4. Integración y Gestión en GitHub
4.1. Conectividad y Autenticación
El agente debe autenticarse en GitHub con el usuario/service account corporativo adecuado.
4.2. Gestión de Ramas y Pull Requests
El agente debe subir el software generado a una rama de trabajo (feature/agente-ia-auto por ejemplo).
Debe crear una Pull Request desde esa rama hacia la rama de integración (develop, main o la que corresponda según el flujo).
La Pull Request debe incluir:
Evidencia de compilación correcta (mvn clean install).
Informe de cobertura de tests y resultados de SonarQube.
Informe de análisis Fortify o URL al informe.
El agente debe monitorizar la Pull Request y, si no supera los checks automáticos, aplicar correcciones y actualizar la PR.
5. Ciclo de vida y Aprendizaje
5.1. Aprendizaje Continuo
El agente debe registrar los errores más habituales y las correcciones aplicadas, generando una base de conocimiento para mejorar iterativamente.
Debe proponer mejoras en el pipeline o en el propio código fuente en base a lecciones aprendidas.
Entregables del Agente de IA
Pull Request automatizada y documentada en GitHub.
Cobertura de tests >90%.
Calidad de código SonarQube sin vulnerabilidades críticas ni bloqueantes.
Ausencia de vulnerabilidades críticas en Fortify.
Informes ejecutivos adjuntos a la PR o en repositorio.
Historial de acciones automáticas realizadas y errores corregidos.
Notas adicionales para el informe
Recomiendo que en el propio informe se añada un apartado de "Riesgos y recomendaciones", explicando posibles límites actuales (por ejemplo, false positives de Fortify, límites de cobertura automática, etc.).
Si el entorno lo permite, detallar qué pipeline o repositorio se usaría para la prueba piloto.
Añadir la referencia a una posible integración con sistemas de notificaciones (Teams, email, Slack...) para avisar de PRs generadas o errores críticos.